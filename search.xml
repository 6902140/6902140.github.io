<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>golang项目结构与板块依赖</title>
    <url>/2023/11/24/golang%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E6%9D%BF%E5%9D%97%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>假设目前有一个项目名字叫<code>goproj</code>，然后该项目下有很多模块<code>mod1</code>,<code>mod2</code>,<code>mod3</code>…</p>
<p> 那么项目依赖管理应该是在<code>goproj</code>根目录下使用’go mod init [mod-name] ‘方法创建<code>go.mod</code>文件。</p>
<p> 然后在<code>mod1</code>中引用<code>mod2</code>中<code>package pkg2</code>的方法应该是：</p>
<p> 在mod1文件夹下使用：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;mod-name/mod2&quot;</span></span><br></pre></td></tr></table></figure>
<p> 加载依赖所处的路径</p>
<p>再使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">pkg2.method()</span><br></pre></td></tr></table></figure>
<p>调用包中的方法即可。</p>
<p>（1）注意<code>go.mod</code>文件的作用;<br>（2）注意文件夹名和包名的区别;</p>
]]></content>
      <categories>
        <category>苦逼开发日常</category>
      </categories>
      <tags>
        <tag>daily-dev</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2023-11.22</title>
    <url>/2023/11/22/leetcode-2023-11-22/</url>
    <content><![CDATA[<h1 id="leetcode日常2023-11-22"><a href="#leetcode日常2023-11-22" class="headerlink" title="leetcode日常2023.11.22"></a><code>leetcode</code>日常2023.11.22</h1><hr>
<p>题目链接在这里<a href="https://leetcode.cn/problems/number-of-islands/description/?envType=study-plan-v2&envId=top-100-liked">click here</a></p>
<p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>
<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和&#x2F;或竖直方向上相邻的陆地连接形成。</p>
<p>此外，你可以假设该网格的四条边均被水包围。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入：grid = [</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>]</span><br><span class="line">]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入：grid = [</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>]</span><br><span class="line">]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 300</code></li>
<li><code>grid[i][j]</code> 的值为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment">#简单的dfs遍历来确定一个岛屿所有陆地</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs_kill</span>(<span class="params">self,i:<span class="built_in">int</span>,j:<span class="built_in">int</span>,grid:<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid[i][j]==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        leny=<span class="built_in">len</span>(grid)</span><br><span class="line">        lenx=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        grid[i][j]=<span class="string">&#x27;2&#x27;</span><span class="comment">#已经遍历过的陆地就标记为2</span></span><br><span class="line">        <span class="keyword">if</span> i-<span class="number">1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">            self.dfs_kill(i-<span class="number">1</span>,j,grid)</span><br><span class="line">        <span class="keyword">if</span> i+<span class="number">1</span>&lt;leny:</span><br><span class="line">            self.dfs_kill(i+<span class="number">1</span>,j,grid)</span><br><span class="line">        <span class="keyword">if</span> j-<span class="number">1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">            self.dfs_kill(i,j-<span class="number">1</span>,grid)</span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">1</span>&lt;lenx:</span><br><span class="line">            self.dfs_kill(i,j+<span class="number">1</span>,grid)</span><br><span class="line">     </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        leny=<span class="built_in">len</span>(grid)</span><br><span class="line">        lenx=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,leny):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,lenx):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    res+=<span class="number">1</span></span><br><span class="line">                    self.dfs_kill(i,j,grid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<hr>
<p>原题链接<a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/description/?envType=study-plan-v2&envId=top-100-liked">click here</a></p>
<p>二叉树中的 路径 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。</p>
<p>路径和 是路径中各节点值的总和。</p>
<p>给你一个二叉树的根节点 root ，返回其 最大路径和 。</p>
<p>示例 1：</p>
<p>输入：root &#x3D; [1,2,3]<br>输出：6<br>解释：最优路径是 2 -&gt; 1 -&gt; 3 ，路径和为 2 + 1 + 3 &#x3D; 6<br>示例 2：</p>
<p>输入：root &#x3D; [-10,9,20,null,null,15,7]<br>输出：42<br>解释：最优路径是 15 -&gt; 20 -&gt; 7 ，路径和为 15 + 20 + 7 &#x3D; 42</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 自己第一次实现的版本，因为思绪混乱导致算法效率较低</span></span><br><span class="line"> <span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">min_int = -sys.maxsize - <span class="number">1</span></span><br><span class="line"><span class="comment">#定义整形的最小值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#预实现的数节点数据结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment">#实现从当前节点出发的最大路径</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singlePath</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> root==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res1=root.val+self.singlePath(root.left)</span><br><span class="line">        res2=root.val+self.singlePath(root.right)</span><br><span class="line">        <span class="keyword">if</span> res1&lt;<span class="number">0</span> <span class="keyword">and</span> res2&lt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> res1&gt;res2:</span><br><span class="line">            <span class="keyword">return</span> res1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> res2</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#实现找到二叉树中的最大元素</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMinNode</span>(<span class="params">self,maxv:<span class="built_in">int</span> ,root: <span class="type">Optional</span>[TreeNode]</span>):</span><br><span class="line">        <span class="keyword">if</span> root==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> min_int</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> root.val&gt;=maxv:</span><br><span class="line">                <span class="keyword">return</span> root.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">max</span>(self.findMinNode(maxv,root.left),self.findMinNode(maxv,root.right))</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    <span class="comment">#算法主要实现函数，现阶段主要是两种情况</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxPathSum_mid</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode],jdm: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment">#这是经过root节点的情况</span></span><br><span class="line">        <span class="keyword">if</span> root==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> min_int</span><br><span class="line">        res1=self.singlePath(root.left)+self.singlePath(root.right)+root.val</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#这是不经过root节点的情况</span></span><br><span class="line">        res2=<span class="built_in">max</span>(self.maxPathSum_mid(root.left,jdm),self.maxPathSum_mid(root.right,jdm))</span><br><span class="line">        <span class="keyword">if</span> res1&gt;=res2:</span><br><span class="line">            jdm[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(res1,res2)        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#要求接口实现</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxPathSum</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> root==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        jdm=<span class="built_in">list</span>([<span class="number">0</span>])</span><br><span class="line">        res=self.maxPathSum_mid(root,jdm=jdm)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> jdm[<span class="number">0</span>]==<span class="number">0</span>:<span class="comment">#如果选中了某些元素</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:<span class="comment">#如果一个节点都没有选中，则选中最大元素返回即可</span></span><br><span class="line">            <span class="keyword">return</span> self.findMinNode(root.val,root)</span><br></pre></td></tr></table></figure>
<hr>
<p>优化后的解法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实际上可以不用分情况讨论，因为迟早会遍历得到</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment">#（1）全局变量可以在这里实现</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.maxSum = <span class="built_in">float</span>(<span class="string">&quot;-inf&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxPathSum</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment">#每次都可以假设最大路径所在的根节点都是当前节点，这样可以有效地避免没找到节点和分类讨论的重复讨论情况</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">maxGain</span>(<span class="params">node</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 递归计算左右子节点的最大贡献值</span></span><br><span class="line">            <span class="comment"># 只有在最大贡献值大于 0 时，才会选取对应子节点</span></span><br><span class="line">            leftGain = <span class="built_in">max</span>(maxGain(node.left), <span class="number">0</span>)</span><br><span class="line">            rightGain = <span class="built_in">max</span>(maxGain(node.right), <span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值</span></span><br><span class="line">            priceNewpath = node.val + leftGain + rightGain</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新答案</span></span><br><span class="line">            self.maxSum = <span class="built_in">max</span>(self.maxSum, priceNewpath)</span><br><span class="line">        </span><br><span class="line">            <span class="comment"># 返回节点的最大贡献值</span></span><br><span class="line">            <span class="keyword">return</span> node.val + <span class="built_in">max</span>(leftGain, rightGain)</span><br><span class="line">   </span><br><span class="line">        maxGain(root)</span><br><span class="line">        <span class="keyword">return</span> self.maxSum</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>苦逼开发日常</category>
      </categories>
      <tags>
        <tag>daily algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2023-11.23</title>
    <url>/2023/11/23/leetcode-2023-11-23/</url>
    <content><![CDATA[<h1 id="Leetcode-2023-11-23康复训练"><a href="#Leetcode-2023-11-23康复训练" class="headerlink" title="Leetcode-2023-11.23康复训练"></a>Leetcode-2023-11.23康复训练</h1><p>「HTML 实体解析器」 是一种特殊的解析器，它将 HTML 代码作为输入，并用字符本身替换掉所有这些特殊的字符实体。</p>
<p>HTML 里这些特殊字符和它们对应的字符实体包括：</p>
<p>双引号：字符实体为 &quot; ，对应的字符是 “ 。<br>单引号：字符实体为 &apos; ，对应的字符是 ‘ 。<br>与符号：字符实体为 &amp; ，对应对的字符是 &amp; 。<br>大于号：字符实体为 &gt; ，对应的字符是 &gt; 。<br>小于号：字符实体为 &lt; ，对应的字符是 &lt; 。<br>斜线号：字符实体为 &frasl; ，对应的字符是 &#x2F; 。<br>给你输入字符串 text ，请你实现一个 HTML 实体解析器，返回解析器解析后的结果。</p>
<p>示例 1：</p>
<p>输入：text &#x3D; “&amp; is an HTML entity but &ambassador; is not.”<br>输出：”&amp; is an HTML entity but &ambassador; is not.”<br>解释：解析器把字符实体 &amp; 用 &amp; 替换<br>示例 2：</p>
<p>输入：text &#x3D; “and I quote: &quot;…&quot;”<br>输出：”and I quote: &quot;…&quot;“<br>示例 3：</p>
<p>输入：text &#x3D; “Stay home! Practice on Leetcode :)”<br>输出：”Stay home! Practice on Leetcode :)”<br>示例 4：</p>
<p>输入：text &#x3D; “x &gt; y &amp;&amp; x &lt; y is always false”<br>输出：”x &gt; y &amp;&amp; x &lt; y is always false”<br>示例 5：</p>
<p>输入：text &#x3D; “leetcode.com&frasl;problemset&frasl;all”<br>输出：”leetcode.com&#x2F;problemset&#x2F;all”</p>
<p>提示：</p>
<p>1 &lt;&#x3D; text.length &lt;&#x3D; 10^5<br>字符串可能包含 256 个ASCII 字符中的任意字符。</p>
<p><a href="https://leetcode.cn/problems/html-entity-parser/description/?envType=daily-question&envId=2023-11-23">原题链接（click here）</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 直接暴力模拟解决</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">entityParser</span>(<span class="params">self, text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        entityMap = &#123;</span><br><span class="line">            <span class="string">&#x27;&amp;quot;&#x27;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&amp;apos;&#x27;</span>: <span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;&amp;gt;&#x27;</span>: <span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&amp;lt;&#x27;</span>: <span class="string">&#x27;&lt;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&amp;frasl;&#x27;</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&amp;amp;&#x27;</span>: <span class="string">&#x27;&amp;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        res=[]</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(text):</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> text[i] == <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                nums=<span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> entityMap.keys():</span><br><span class="line">                    nums +=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> e!=<span class="literal">None</span>:</span><br><span class="line">                        <span class="keyword">if</span> text[i:i+<span class="built_in">len</span>(e)]==e:</span><br><span class="line">                            res.append(entityMap[e])</span><br><span class="line">                            i+=<span class="built_in">len</span>(e)</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                           </span><br><span class="line">                    <span class="keyword">if</span> nums==<span class="built_in">len</span>(entityMap):</span><br><span class="line">                        res.append(text[i])</span><br><span class="line">                        i+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(text[i])</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试用例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="built_in">print</span>(s.entityParser(<span class="string">&quot;&amp;quot; I am a &amp;quot;&amp;amp;&amp;gt;&amp;lt;nrkegnj&amp;&amp;&amp;vshj&amp;gt; &quot;</span>))</span><br></pre></td></tr></table></figure>

<hr>
<p>随机链表的复制：</p>
<p>给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。</p>
<p>构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。</p>
<p>例如，如果原链表中有 X 和 Y 两个节点，其中 X.random –&gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random –&gt; y 。</p>
<p>返回复制链表的头节点。</p>
<p>用一个由 n 个节点组成的链表来表示输入&#x2F;输出中的链表。每个节点用一个 [val, random_index] 表示：</p>
<p>val：一个表示 Node.val 的整数。<br>random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。<br>你的代码 只 接受原链表的头节点 head 作为传入参数。</p>
<p><a href="https://leetcode.cn/problems/copy-list-with-random-pointer/">原题链接（click here）</a></p>
<p>个人解答：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Definition for a Node.</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x: <span class="built_in">int</span>, <span class="built_in">next</span>: <span class="string">&#x27;Node&#x27;</span> = <span class="literal">None</span>, random: <span class="string">&#x27;Node&#x27;</span> = <span class="literal">None</span></span>):</span><br><span class="line">        self.val = <span class="built_in">int</span>(x)</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        self.random = random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyRandomList</span>(<span class="params">self, head: <span class="string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="string">&#x27;Optional[Node]&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> head==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        nodemap=&#123;&#125;</span><br><span class="line">        nodetemp=head</span><br><span class="line"></span><br><span class="line">        <span class="comment">#第一次复制先复制好节点元素本身</span></span><br><span class="line">        <span class="keyword">while</span> nodetemp!=<span class="literal">None</span>:</span><br><span class="line">            nodecopied=Node(nodetemp.val)</span><br><span class="line">            <span class="comment">#同时使用哈希表来建立映射关系</span></span><br><span class="line">            nodemap[nodetemp] = nodecopied</span><br><span class="line">            nodetemp=nodetemp.<span class="built_in">next</span></span><br><span class="line">            </span><br><span class="line">        nodemap[<span class="literal">None</span>]=<span class="literal">None</span></span><br><span class="line">        nodetemp=head</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#第二次遍历用来在已经建立好的节点上来建立连接关系</span></span><br><span class="line">        <span class="keyword">while</span> nodetemp!=<span class="literal">None</span>:</span><br><span class="line">            nodemap[nodetemp].<span class="built_in">next</span>=nodemap[nodetemp.<span class="built_in">next</span>]</span><br><span class="line">            nodemap[nodetemp].random=nodemap[nodetemp.random]</span><br><span class="line">            nodetemp=nodetemp.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#返回映射之后的头节点</span></span><br><span class="line">        <span class="keyword">return</span> nodemap[head]</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<hr>
<p>螺旋矩阵填充<a href="https://leetcode.cn/problems/spiral-matrix-ii/">(原题链接：click here)</a></p>
<p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix </p>
<p>示例 1：<br>输入：n &#x3D; 3<br>输出：[[1,2,3],[8,9,4],[7,6,5]]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateMatrix</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        direc=&#123;</span><br><span class="line">            <span class="number">0</span>:[<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">            <span class="number">1</span>:[<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            <span class="number">2</span>:[<span class="number">0</span>,-<span class="number">1</span>],</span><br><span class="line">            <span class="number">3</span>:[-<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#生成初始矩阵优化</span></span><br><span class="line">        res= [[-<span class="number">1</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        </span><br><span class="line">        direction=<span class="number">0</span></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        x=<span class="number">0</span>;y=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            res[x][y]=i+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>==n*n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> y+direc[direction][<span class="number">1</span>]&gt;=<span class="number">0</span> <span class="keyword">and</span> x+direc[direction][<span class="number">0</span>]&gt;=<span class="number">0</span> <span class="keyword">and</span> y+direc[direction][<span class="number">1</span>]&lt;n <span class="keyword">and</span> x+direc[direction][<span class="number">0</span>]&lt;n <span class="keyword">and</span> res[x+direc[direction][<span class="number">0</span>]][y+direc[direction][<span class="number">1</span>]]&lt;<span class="number">0</span>:</span><br><span class="line">                y+=direc[direction][<span class="number">1</span>]</span><br><span class="line">                x+=direc[direction][<span class="number">0</span>]</span><br><span class="line">                i+=<span class="number">1</span>                </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                direction=(direction+<span class="number">1</span>)%<span class="number">4</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


<hr>
<p>爬楼梯<a href="https://leetcode.cn/problems/climbing-stairs/">原题链接 click here</a></p>
<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>记事本回溯法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.note=[-<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)] </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n&gt;=<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> self.note[n-<span class="number">2</span>]!=-<span class="number">1</span>:</span><br><span class="line">                ans+=self.note[n-<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans+=self.climbStairs(n-<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> n&gt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> self.note[n-<span class="number">1</span>]!=-<span class="number">1</span>:</span><br><span class="line">                ans+=self.note[n-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans+=self.climbStairs(n-<span class="number">1</span>)</span><br><span class="line">        self.note[n]=ans</span><br><span class="line">        <span class="keyword">return</span> self.CLimbStairs(n-<span class="number">2</span>)+self.climbStairs(n-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>动态规划算法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        lis=[]</span><br><span class="line">        lis.append(<span class="number">1</span>)</span><br><span class="line">        lis.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            lis.append(lis[i]+lis[i+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> lis[n]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>苦逼开发日常</category>
      </categories>
      <tags>
        <tag>daily algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro 深度学习开发环境配置</title>
    <url>/2023/11/21/manjaro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本文主要记录 linux 系统 (manjaro) 双显卡 (Intel 集显 + Nvidia 独显) 的驱动安装以及 cuda 的安装细节。</p>
<h2 id="（1）manjaro双显卡驱动安装以及配置"><a href="#（1）manjaro双显卡驱动安装以及配置" class="headerlink" title="（1）manjaro双显卡驱动安装以及配置"></a>（1）<code>manjaro</code>双显卡驱动安装以及配置</h2><p>首先在安装manjaro时应该选择Install Proprietary Diver 安装闭源驱动。<br>看到以下输出则说明闭源驱动安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mhwd -li</span><br><span class="line">&gt; Installed PCI configs:</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">                  NAME               VERSION          FREEDRIVER           TYPE</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">video-hybrid-amd-nvidia-prime            2023.03.23               <span class="literal">false</span>            PCI</span><br><span class="line">           video-linux            2018.05.04                <span class="literal">true</span>            PCI</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装必要插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S linux&lt;内核版本（比如说54）&gt;-headers acpi_call-dkms xorg-xrandr xf86-video-intel git</span><br></pre></td></tr></table></figure>
<p>克隆github项目到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从github克隆</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/dglt1/optimus-switch-sddm.git </span><br><span class="line"><span class="built_in">cd</span> ~/optimus-switch-sddm  <span class="comment"># 切换到插件文件夹</span></span><br><span class="line"><span class="built_in">chmod</span> +x install.sh	      <span class="comment"># 给安装程序添加权限</span></span><br><span class="line">sudo ./install.sh	      <span class="comment"># 安装插件</span></span><br></pre></td></tr></table></figure>

<p>自由切换显卡模式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用Intel核显</span></span><br><span class="line">sudo set-intel.sh</span><br><span class="line"><span class="comment"># 启用Nvidia-Prime</span></span><br><span class="line">sudo set-nvidia.sh</span><br></pre></td></tr></table></figure>

<h2 id="（2）安装cuda"><a href="#（2）安装cuda" class="headerlink" title="（2）安装cuda"></a>（2）安装<code>cuda</code></h2><p>一键安装<code>cuda</code> <code>cudnn</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S cuda cudnn <span class="comment">#一键安装</span></span><br><span class="line"><span class="comment">#我的安装目录在/opt/cuda/bin</span></span><br></pre></td></tr></table></figure>
<p>需要修改环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/opt/cuda/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>测试安装是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> $ nvcc -V</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2023 NVIDIA Corporation</span><br><span class="line">Built on Fri_Sep__8_19:17:24_PDT_2023</span><br><span class="line">Cuda compilation tools, release 12.3, V12.3.52</span><br><span class="line">Build cuda_12.3.r12.3/compiler.33281558_0</span><br></pre></td></tr></table></figure>

<h3 id="（3）安装pytorch依赖"><a href="#（3）安装pytorch依赖" class="headerlink" title="（3）安装pytorch依赖"></a>（3）安装<code>pytorch</code>依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install torch torchvision </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试GPU加速是否可用</span></span><br><span class="line">(DL) kaneki@Manjaro:/opt/cuda/bin </span><br><span class="line"> $ python</span><br><span class="line">Python 3.8.18 (default, Sep 11 2023, 13:40:15) </span><br><span class="line">[GCC 11.2.0] :: Anaconda, Inc. on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import torch</span><br><span class="line">&gt;&gt;&gt; torch.cuda.is_available()</span><br><span class="line">True</span><br><span class="line"><span class="comment"># 返回True则说明安装成功</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://www.cnblogs.com/IICaesar/p/13262652.html">manjaro双显卡快捷切换 (click here)</a></p>
<p><a href="http://home.ustc.edu.cn/~liujunyan/blog/Linux-manjaro-%E4%B8%8B%E5%8F%8C%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Acuda%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">pytorch配置  (click here)</a></p>
]]></content>
      <categories>
        <category>苦逼开发日常</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>记录`mariaDB`在`manjaro`上的一次安装配置</title>
    <url>/2023/11/23/mariadb-installation-on-manjaro/</url>
    <content><![CDATA[<h2 id="基本安装步骤："><a href="#基本安装步骤：" class="headerlink" title="基本安装步骤："></a>基本安装步骤：</h2><p>step1：pacman安装mariadb的安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S  mariadb-clients mariadb <span class="comment">#命令行安装mariadb        </span></span><br></pre></td></tr></table></figure>

<p>step2：根据配置安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql <span class="comment">#按照配置安装</span></span><br></pre></td></tr></table></figure>

<p>step3：启动mariadb service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl start mariadb <span class="comment"># 启动mariadb服务</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> mariadb <span class="comment"># 设置开机自启动</span></span><br></pre></td></tr></table></figure>

<p>step4: 配置数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mariadb-secure-installation <span class="comment"># 主要是进行🔑的配置</span></span><br></pre></td></tr></table></figure>

<p>step5：登陆<code>mariadb</code>服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mariadb -u root -p </span><br></pre></td></tr></table></figure>

<p>本来我是想要在我的<code>manjaro</code>上安装<code>mysql</code>的，但是总是遇到找不到<code>\tmp\mysql.sock</code>的问题，遂使用<code>mariadb</code>作为<code>mysql</code>的优化替代品。<br>（听闻有传言是某版本之后的<code>manjaro</code>不再支持<code>mysql</code>）</p>
<h2 id="通过本次安装我新学会了："><a href="#通过本次安装我新学会了：" class="headerlink" title="通过本次安装我新学会了："></a>通过本次安装我新学会了：</h2><p>使用<code>systemctl</code>管理服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line"><span class="comment"># output：Created symlink /etc/systemd/system/multi-user.target.wants/mariadb.service → /usr/lib/systemd/system/mariadb.service.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了enable指令还可以通过stop start restart status等指令来控制服务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>苦逼开发日常</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>sql数据库学习（1）</title>
    <url>/2023/11/24/sql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h2 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h2><p>（1）创建新数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">&lt;</span>database<span class="operator">-</span>name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<p>（2）删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE <span class="operator">&lt;</span>database<span class="operator">-</span>name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<p>（3）显示数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure>
<p>（4）选中数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE <span class="operator">&lt;</span>database<span class="operator">-</span>name<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="数据库的数据类型"><a href="#数据库的数据类型" class="headerlink" title="数据库的数据类型"></a>数据库的数据类型</h2><p><code>MySQL</code> 支持多种类型，大致可以分为三类：数值、日期&#x2F;时间和字符串(字符)类型。</p>
<ul>
<li><p>整数类型（Integer Types）：用于存储整数值，例如INT、INTEGER、TINYINT、SMALLINT、BIGINT等。</p>
</li>
<li><p>小数类型（Decimal Types）：用于存储小数值，包括定点小数和浮点小数。常见的类型有DECIMAL、NUMERIC、FLOAT、DOUBLE等。</p>
</li>
<li><p>字符串类型（String Types）：用于存储文本数据，例如CHAR、VARCHAR、TEXT、NCHAR、NVARCHAR、NTEXT等。</p>
</li>
<li><p>日期和时间类型（Date and Time Types）：用于存储日期和时间信息，常见的类型包括DATE、TIME、DATETIME、TIMESTAMP等。<br>if err !&#x3D; nil {<br>  log.Fatal(err)<br>  }</p>
</li>
<li><p>布尔类型（Boolean Types）：用于存储布尔值，表示真或假。在某些数据库中，布尔类型可能被表示为BOOLEAN或BIT。</p>
</li>
<li><p>二进制类型（Binary Types）：用于存储二进制数据，例如图像、音频或视频文件。常见的类型有BINARY、VARBINARY、BLOB等。</p>
</li>
<li><p>其他特殊类型：如枚举类型（ENUM）、集合类型（SET）、JSON类型（JSON）等，这些类型可能在不同的数据库系统中具有不同的实现。</p>
</li>
</ul>
<h2 id="在代码中使用sql"><a href="#在代码中使用sql" class="headerlink" title="在代码中使用sql"></a>在代码中使用sql</h2><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span>                    </span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span> </span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:3356@tcp(127.0.0.1:3306)/data_11_24&quot;</span>) <span class="comment">//声明数据库类型为mysql 使用用户名,密码,连接形式,链接地址和端口,指定数据库</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	err = db.Ping()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Println(<span class="string">&quot;数据库连接成功&quot;</span>)</span><br><span class="line">	<span class="comment">//定义一个创建数据库表的变量,后续进行exec的调用.</span></span><br><span class="line">	createTable := <span class="string">&quot;CREATE TABLE if not exists `user`&quot;</span>+<span class="string">&quot; (`uid` int(10) NOT NULL AUTO_INCREMENT,&quot;</span>+<span class="string">&quot;`username` varchar(64) NOT NULL DEFAULT &#x27;1&#x27;, &quot;</span>+<span class="string">&quot;`gender` tinyint(1) DEFAULT NULL,&quot;</span>+<span class="string">&quot;`password` varchar(64) DEFAULT NULL,&quot;</span>+<span class="string">&quot;`created` date DEFAULT NULL,PRIMARY KEY (`uid`)) ;&quot;</span></span><br><span class="line"></span><br><span class="line">	_, err = db.Exec(createTable)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Println(<span class="string">&quot;表单创建成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">	sql_sentence:=<span class="string">&quot;insert into `user` (`username`, `password`, `created`,`gender`) values (\&quot;john\&quot;,\&quot;103356\&quot;,\&quot;2023-11-24\&quot;,1) ;&quot;</span></span><br><span class="line"></span><br><span class="line">	_,err= db.Exec(sql_sentence)</span><br><span class="line">	_,err= db.Exec(<span class="string">&quot;drop table if exists `user`&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Println(<span class="string">&quot;成功移除表单&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="sql-常用语法："><a href="#sql-常用语法：" class="headerlink" title="sql 常用语法："></a><code>sql</code> 常用语法：</h2><ul>
<li>插入数据项<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN ) <span class="keyword">VALUES</span> ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>苦逼开发日常</category>
      </categories>
      <tags>
        <tag>[object Object]</tag>
      </tags>
  </entry>
  <entry>
    <title>小站诞生</title>
    <url>/2023/11/14/start-my-website/</url>
    <content><![CDATA[<p>这个小站是<code>Zhuiri Xiao</code>@<code>xjtu</code>于2023.11.20日基于<code>hexo</code>创建的托管于<code>github</code>平台的个人博客;</p>
<p>主要会用于记录个人生活以及学习笔记。</p>
<h2 id="小站的诞生"><a href="#小站的诞生" class="headerlink" title="小站的诞生"></a>小站的诞生</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line"><span class="comment">#如果您没有代理 可以参考以下命令设置npm代理</span></span><br><span class="line">$ npm config <span class="built_in">set</span> registry http://mirrors.cloud.tencent.com/npm/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用npm安装<code>hexo</code></p>
<h3 id="初始化blog项目"><a href="#初始化blog项目" class="headerlink" title="初始化blog项目"></a>初始化blog项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init ‘你的blog根目录名字’</span><br><span class="line"><span class="built_in">cd</span> ‘项目根目录’</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>


<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g <span class="comment">#产生静态文件</span></span><br><span class="line">$ hexo server <span class="comment">#在本地运行</span></span><br></pre></td></tr></table></figure>

<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p>首先需要在<code>_config.yml</code>中配置<code>部署</code>选项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/6902140/6902140.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">ghp_R1UBIUcdc21m9WFZOy9wX6loJ39J9c30nrBB</span></span><br><span class="line"><span class="comment"># ————————————————</span></span><br><span class="line"><span class="comment"># 参考链接：https://blog.csdn.net/yaorongke/article/details/119089190</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="新增文章："><a href="#新增文章：" class="headerlink" title="新增文章："></a>新增文章：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My-New-Post&quot;</span></span><br><span class="line"><span class="comment">#then writting and re-generate and deploy</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>苦逼开发日常</category>
      </categories>
      <tags>
        <tag>daily-dev</tag>
      </tags>
  </entry>
  <entry>
    <title>torch基础知识</title>
    <url>/2023/11/23/torch%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>我们将开始介绍PyTorch基础知识，本章我们将介绍张量，以帮助大家建立起对数据的描述，随后我们再介绍张量的运算，最后再讲PyTorch中所有神经网络的核心包 autograd ，也就是自动微分，了解完这些内容我们就可以较好地理解PyTorch代码了。在深度学习中，我们通常将数据以张量的形式进行表示，比如我们用三维张量表示一个RGB图像，四维张量表示视频。</p>
<p>本文主要可以分为以下几部分：</p>
<ul>
<li>PyTorch如何创建张量</li>
<li>PyTorch中张量的操作</li>
<li>PyTorch中张量的广播机制</li>
</ul>
<h2 id="torch-张量的创建："><a href="#torch-张量的创建：" class="headerlink" title="torch 张量的创建："></a><code>torch</code> 张量的创建：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># 创建一个空的张量</span></span><br><span class="line">empty_tensor = torch.empty(size)</span><br><span class="line"><span class="comment"># 创建一个全为零的张量</span></span><br><span class="line">zeros_tensor = torch.zeros(size)</span><br><span class="line"><span class="comment"># 创建一个全为一的张量</span></span><br><span class="line">ones_tensor = torch.ones(size)</span><br><span class="line"><span class="comment"># 创建一个随机数张量</span></span><br><span class="line">rand_tensor = torch.rand(size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Python 列表创建张量</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">tensor_from_list = torch.tensor(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 NumPy 数组创建张量</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">numpy_array = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">tensor_from_numpy = torch.from_numpy(numpy_array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看张量的形状</span></span><br><span class="line">shape = tensor.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看张量的数据类型</span></span><br><span class="line">dtype = tensor.dtype</span><br></pre></td></tr></table></figure>

<h2 id="torch-张量的基本操作"><a href="#torch-张量的基本操作" class="headerlink" title="torch 张量的基本操作"></a><code>torch</code> 张量的基本操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor1 = torch.tensor(data1)</span><br><span class="line">tensor2 = torch.tensor(data2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line">result = tensor1 + tensor2</span><br><span class="line">tensor1.add_(tensor2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line">result = tensor1 - tensor2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">result = tensor1 * tensor2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">result = tensor1 / tensor2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵乘法</span></span><br><span class="line">result = torch.matmul(tensor1, tensor2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平均值</span></span><br><span class="line">mean = tensor.mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line"><span class="built_in">sum</span> = tensor.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片操作 取第二列</span></span><br><span class="line"><span class="built_in">print</span>(result.[:, <span class="number">1</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片操作需要注意的一点就是切片与原张量指向的是同一片数据</span></span><br><span class="line"><span class="comment"># 改变切片数据的值意味着原张量数值也会变化</span></span><br><span class="line">y = result[<span class="number">0</span>,:]</span><br><span class="line">y += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>, :]) <span class="comment"># 源tensor也被改了了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor维度变换操作</span></span><br><span class="line"><span class="comment"># tensor</span></span><br><span class="line">x = torch.randn(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">y = x.view(<span class="number">16</span>)</span><br><span class="line">z = x.view(-<span class="number">1</span>, <span class="number">8</span>) <span class="comment"># -1是指这一维的维数由其他维度决定</span></span><br><span class="line"><span class="built_in">print</span>(x.size(), y.size(), z.size())</span><br><span class="line"><span class="comment">#注: torch.view() 返回的新tensor与源tensor共享内存(其实是同一个tensor)，更改其中的一个，另外一个也会跟着改变。(顾名思义，view()仅仅是改变了对这个张量的观察角度)</span></span><br><span class="line"></span><br><span class="line">xcp=x.clone()</span><br><span class="line">xcp.add_(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x,xcp)</span><br><span class="line"><span class="comment"># 上面我们说过torch.view()会改变原始张量，但是很多情况下，我们希望原始张量和变换后的张量互相不影响。</span></span><br><span class="line"><span class="comment"># 为了使创建的张量和原始张量不共享内存，我们需要使用第二种方法torch.reshape()， </span></span><br><span class="line"><span class="comment"># 同样可以改变张量的形状，但是此函数并不能保证返回的是其拷贝值，所以官方不推荐使用。</span></span><br><span class="line"><span class="comment"># 推荐的方法是我们先用 clone() 创造一个张量副本然后再使用 torch.view()进行函数维度变换 。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="torch中tenosr-张量的广播机制："><a href="#torch中tenosr-张量的广播机制：" class="headerlink" title="torch中tenosr 张量的广播机制："></a><code>torch</code>中<code>tenosr</code> 张量的广播机制：</h2><p>PyTorch 中的张量广播（Broadcasting）是一种功能，它允许在不同形状的张量之间进行逐元素的操作，而无需显式地扩展维度或复制数据。广播机制可以方便地进行张量运算，提高代码的可读性和效率。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1：标量与张量的广播</span></span><br><span class="line">scalar = torch.tensor(<span class="number">3</span>)  <span class="comment"># 标量</span></span><br><span class="line">tensor = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 1维张量</span></span><br><span class="line"></span><br><span class="line">result = scalar + tensor  <span class="comment"># 标量会广播到与张量形状相同</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: tensor([4, 5, 6])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例2：张量之间的广播</span></span><br><span class="line">tensor1 = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])  <span class="comment"># 2x3 张量</span></span><br><span class="line">tensor2 = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 1维张量</span></span><br><span class="line"></span><br><span class="line">result = tensor1 + tensor2  <span class="comment"># 1维张量会广播到与2维张量形状相同</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: tensor([[2, 4, 6], [5, 7, 9]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例3：无法进行广播的情况</span></span><br><span class="line">tensor1 = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])  <span class="comment"># 2x3 张量</span></span><br><span class="line">tensor2 = torch.tensor([<span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># 1维张量</span></span><br><span class="line"></span><br><span class="line">result = tensor1 + tensor2  <span class="comment"># 因为形状不符合广播规则，会抛出错误</span></span><br><span class="line"><span class="comment"># 输出: RuntimeError: The size of tensor1 (3) must match the size of tensor2 (2) at non-singleton dimension 1</span></span><br></pre></td></tr></table></figure>

<p>通过广播机制，我们可以在不显式重复数据或扩展维度的情况下，对具有不同形状的张量执行逐元素操作。这使得张量的操作更加灵活和高效。需要注意的是，尽管广播可以提供便利，但在使用广播时，仍需注意张量的形状，以确保操作符合预期。</p>
]]></content>
      <categories>
        <category>苦逼开发日常</category>
      </categories>
      <tags>
        <tag>[object Object]</tag>
      </tags>
  </entry>
  <entry>
    <title>有关于小帆帆的记事本</title>
    <url>/2023/11/17/%E6%9C%89%E5%85%B3%E4%BA%8E%E5%B0%8F%E5%B8%86%E5%B8%86%E7%9A%84%E8%AE%B0%E4%BA%8B%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="帆帆公举-愛するもの"><a href="#帆帆公举-愛するもの" class="headerlink" title="帆帆公举 愛するもの"></a>帆帆公举 愛するもの</h2><ul>
<li>圣女果冰糖葫芦</li>
<li>喜欢被夸年轻</li>
<li>喜欢麦当劳等相似垃圾食品</li>
<li>喜欢油腻烤肠</li>
</ul>
<h2 id="帆帆公举-嫌なこと"><a href="#帆帆公举-嫌なこと" class="headerlink" title="帆帆公举 嫌なこと"></a>帆帆公举 嫌なこと</h2><ul>
<li>被叫做坦克</li>
<li>被恶意贬低</li>
</ul>
]]></content>
      <categories>
        <category>小小生活情调</category>
      </categories>
      <tags>
        <tag>我和我的帆帆公主</tag>
      </tags>
  </entry>
  <entry>
    <title>记一个leetcode优化</title>
    <url>/2023/11/24/%E8%AE%B0%E4%B8%80%E4%B8%AAleetcode%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>给你一个下标从 0 开始的整数数组 nums ，它表示英雄的能力值。如果我们选出一部分英雄，这组英雄的 力量 定义为：</p>
<p>i0 ，i1 ，… ik 表示这组英雄在数组中的下标。那么这组英雄的力量为 max(nums[i0],nums[i1] … nums[ik])2 * min(nums[i0],nums[i1] … nums[ik]) 。<br>请你返回所有可能的 非空 英雄组的 力量 之和。由于答案可能非常大，请你将结果对 109 + 7 取余。</p>
<p> <a href="https://leetcode.cn/problems/power-of-heroes/description/?envType=daily-question&envId=2023-11-24">原题链接 click here</a></p>
<hr>
<p> 解法&lt;1&gt;:暴力遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暴力实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumOfPower</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        stub=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">        nums=<span class="built_in">sorted</span>(nums,reverse=<span class="literal">False</span>)</span><br><span class="line">        processedNums=nums</span><br><span class="line">        length=<span class="built_in">len</span>(processedNums)</span><br><span class="line">        db=[<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">5</span>+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">            db[i]=db[i-<span class="number">1</span>]*<span class="number">2</span>%stub</span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,length):</span><br><span class="line">                delta=(processedNums[j]**<span class="number">2</span>)*processedNums[i]  </span><br><span class="line">                <span class="keyword">if</span> j&gt;i:</span><br><span class="line">                    delta*=db[j-i-<span class="number">1</span>]</span><br><span class="line">                    delta%=stub                    </span><br><span class="line">                res+= delta</span><br><span class="line">                res%=stub</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>解法&lt;2&gt;:动态规划算法实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态规划解法：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumOfPower</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res=<span class="number">0</span>;stub=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">        length=<span class="built_in">len</span>(nums)</span><br><span class="line">        nums=<span class="built_in">sorted</span>(nums)</span><br><span class="line">        dpmin=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length)] <span class="comment">#dpmin[i]保存的是以nums第i个数字结尾的所有序列的最小元素之和   </span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,length):</span><br><span class="line">            delta=nums[i]*nums[i]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,i):</span><br><span class="line">                dpmin[i]+=dpmin[j]</span><br><span class="line">                dpmin[i]%=stub</span><br><span class="line">            dpmin[i]+=nums[i]</span><br><span class="line">            dpmin[i]%=stub</span><br><span class="line">            delta=(delta*dpmin[i])%stub</span><br><span class="line">            res+=delta</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">             </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>解法&lt;3&gt;：前缀和优化的动态规划算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态规划+前缀和优化解法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumOfPower</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res=<span class="number">0</span>;stub=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">        length=<span class="built_in">len</span>(nums)</span><br><span class="line">        nums=<span class="built_in">sorted</span>(nums)</span><br><span class="line">        dpmin=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length+<span class="number">1</span>)] <span class="comment">#dpmin[i]保存的是以nums第i个数字结尾的所有序列的最小元素之和   </span></span><br><span class="line">        </span><br><span class="line">        preSum=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length+<span class="number">1</span>)]<span class="comment"># preSum(i)=sum(dpmin) from 0 to i-1</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        于是有：</span></span><br><span class="line"><span class="string">        preSum(i+1)=preSum(i)+dpmin(i)</span></span><br><span class="line"><span class="string">        dpmin(i)=nums[i]+preSum(i)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,length):</span><br><span class="line">            delta=nums[i]*nums[i]</span><br><span class="line">            dpmin[i]=(nums[i]+preSum[i])%stub</span><br><span class="line">            preSum[i+<span class="number">1</span>]=preSum[i]+dpmin[i]%stub</span><br><span class="line">            delta=(delta*dpmin[i])%stub</span><br><span class="line">            res+=delta</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">             </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>苦逼开发日常</category>
      </categories>
      <tags>
        <tag>daily algorithm</tag>
      </tags>
  </entry>
</search>
